{"version":3,"sources":["sounds/index.js","sounds/120_future_funk_beats_25.mp3","sounds/120_stutter_breakbeats_16.mp3","sounds/Bass Warwick heavy funk groove on E 120 BPM.mp3","sounds/electric guitar coutry slide 120bpm - B.mp3","sounds/FUD_120_StompySlosh.mp3","sounds/GrooveB_120bpm_Tanggu.mp3","sounds/MazePolitics_120_Perc.mp3","sounds/PAS3GROOVE1.03B.mp3","sounds/SilentStar_120_Em_OrganSynth.mp3","TimeContext.js","components/Pad.js","components/PadsContainer.js","modules/Recorder.js","components/ControlPanel.js","App.js","index.js"],"names":["sounds","TimeContext","createContext","Pad","file","canPlay","useState","isPlaying","setIsPlaying","audioRef","useRef","useContext","timer","setEnableCounter","effectAllSounds","setEffectAllSounds","useEffect","setTimeout","current","play","pause","currentTime","change","prevCount","onClick","className","src","ref","loop","PadsContainer","map","sound","i","Recorder","source","cfg","config","bufferLen","numChannels","mimeType","recording","callbacks","getBuffer","exportWAV","Object","assign","this","context","node","createScriptProcessor","createJavaScriptNode","call","onaudioprocess","e","buffer","channel","push","inputBuffer","getChannelData","worker","postMessage","command","connect","destination","InlineWorker","sampleRate","recLength","recBuffers","initBuffers","mergeBuffers","result","Float32Array","offset","length","set","writeString","view","string","setUint8","charCodeAt","onmessage","data","record","type","interleaved","buffers","inputL","inputR","index","inputIndex","interleave","dataview","samples","ArrayBuffer","DataView","setUint32","setUint16","output","input","s","Math","max","min","setInt16","floatTo16BitPCM","encodeWAV","audioBlob","Blob","cb","pop","callback","Error","blob","filename","url","window","URL","webkitURL","createObjectURL","link","document","createElement","href","download","click","createEvent","initEvent","dispatchEvent","ControlPanel","setEnableAllSounds","setCanPlay","setRecordUrl","isRecording","setIsRecording","setRecord","handlePlayStop","bool","changeAllSounds","message","handleRecord","stop","blobUrl","audioContext","AudioContext","navigator","mediaDevices","getDisplayMedia","audio","video","then","stream","createMediaStreamSource","rec","catch","err","console","log","startRecord","fontSize","App","setTimer","enableCounter","recordUrl","interval","setInterval","prevTime","clearInterval","Provider","value","classname","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f066295b.chunk.js","sourcesContent":["import futureFunk from './120_future_funk_beats_25.mp3';\r\nimport stutterBreak from './120_stutter_breakbeats_16.mp3';\r\nimport heavyFunk from './Bass Warwick heavy funk groove on E 120 BPM.mp3';\r\nimport electricGuitar from './electric guitar coutry slide 120bpm - B.mp3';\r\nimport stompySlosh from './FUD_120_StompySlosh.mp3';\r\nimport tanggu from './GrooveB_120bpm_Tanggu.mp3';\r\nimport mazePolitics from './MazePolitics_120_Perc.mp3';\r\nimport paseGroove from './PAS3GROOVE1.03B.mp3';\r\nimport silentStar from './SilentStar_120_Em_OrganSynth.mp3';\r\n\r\nconst sounds = [\r\n  futureFunk,\r\n  stutterBreak,\r\n  heavyFunk,\r\n  electricGuitar,\r\n  stompySlosh,\r\n  tanggu,\r\n  mazePolitics,\r\n  paseGroove,\r\n  silentStar,\r\n];\r\n\r\nexport default sounds;\r\n","export default __webpack_public_path__ + \"static/media/120_future_funk_beats_25.5eb417fc.mp3\";","export default __webpack_public_path__ + \"static/media/120_stutter_breakbeats_16.37c82282.mp3\";","export default __webpack_public_path__ + \"static/media/Bass Warwick heavy funk groove on E 120 BPM.52c24c81.mp3\";","export default __webpack_public_path__ + \"static/media/electric guitar coutry slide 120bpm - B.230fcab8.mp3\";","export default __webpack_public_path__ + \"static/media/FUD_120_StompySlosh.27bdc145.mp3\";","export default __webpack_public_path__ + \"static/media/GrooveB_120bpm_Tanggu.3e1411b4.mp3\";","export default __webpack_public_path__ + \"static/media/MazePolitics_120_Perc.2d08c654.mp3\";","export default __webpack_public_path__ + \"static/media/PAS3GROOVE1.03B.f77c6da4.mp3\";","export default __webpack_public_path__ + \"static/media/SilentStar_120_Em_OrganSynth.f2d668af.mp3\";","import { createContext } from 'react';\r\n\r\nexport const TimeContext = createContext(0);\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { TimeContext } from '../TimeContext';\r\n\r\nfunction Pad({ file, canPlay }) {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const audioRef = useRef(null);\r\n  const { timer, setEnableCounter, effectAllSounds, setEffectAllSounds } =\r\n    useContext(TimeContext);\r\n\r\n  const handleClick = () => {\r\n    // Change isPlaying state (on / off)\r\n    if (!isPlaying) {\r\n      setEnableCounter((prevCount) => (prevCount += 1));\r\n    } else {\r\n      setEnableCounter((prevCount) => (prevCount -= 1));\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Play only when play button is clicked and the pad is on\r\n    if (canPlay && isPlaying) {\r\n      if (timer !== 0) {\r\n        setTimeout(() => {\r\n          if (canPlay) {\r\n            audioRef.current.play();\r\n          }\r\n        }, 8000 - timer);\r\n      } else {\r\n        audioRef.current.play();\r\n      }\r\n    } else {\r\n      audioRef.current.pause();\r\n      audioRef.current.currentTime = 0;\r\n    }\r\n  }, [canPlay, isPlaying]);\r\n\r\n  useEffect(() => {\r\n    // Turn on all pads when clicked or stop all pads\r\n    if (effectAllSounds.change === 'enable' && !isPlaying) {\r\n      setIsPlaying(true);\r\n      setEnableCounter((prevCount) => (prevCount += 1));\r\n    }\r\n    if (effectAllSounds.change === 'disable' && isPlaying) {\r\n      setIsPlaying(false);\r\n      setEnableCounter((prevCount) => (prevCount -= 1));\r\n      audioRef.current.pause();\r\n      audioRef.current.currentTime = 0;\r\n    }\r\n    setEffectAllSounds(false);\r\n  }, [effectAllSounds]);\r\n\r\n  return (\r\n    <div\r\n      onClick={handleClick}\r\n      className={isPlaying ? 'playing pad' : 'notPlaying pad'}\r\n    >\r\n      <audio src={file} ref={audioRef} loop={true}></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pad;\r\n","import React from 'react';\r\nimport '../styles/padsContainer.scss';\r\nimport sounds from '../sounds';\r\nimport Pad from './Pad';\r\n\r\nfunction PadsContainer({ canPlay }) {\r\n  return (\r\n    <div className='padsContainer'>\r\n      {sounds.map((sound, i) => (\r\n        <Pad file={sound} canPlay={canPlay} key={i} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PadsContainer;\r\n","/* Taken from https://github.com/mattdiamond/Recorderjs */\r\n\r\nimport InlineWorker from 'inline-worker';\r\n\r\nexport class Recorder {\r\n  config = {\r\n    bufferLen: 4096,\r\n    numChannels: 2,\r\n    mimeType: 'audio/wav',\r\n  };\r\n\r\n  recording = false;\r\n\r\n  callbacks = {\r\n    getBuffer: [],\r\n    exportWAV: [],\r\n  };\r\n\r\n  constructor(source, cfg) {\r\n    Object.assign(this.config, cfg);\r\n    this.context = source.context;\r\n    this.node = (\r\n      this.context.createScriptProcessor || this.context.createJavaScriptNode\r\n    ).call(\r\n      this.context,\r\n      this.config.bufferLen,\r\n      this.config.numChannels,\r\n      this.config.numChannels\r\n    );\r\n\r\n    this.node.onaudioprocess = (e) => {\r\n      if (!this.recording) return;\r\n\r\n      var buffer = [];\r\n      for (var channel = 0; channel < this.config.numChannels; channel++) {\r\n        buffer.push(e.inputBuffer.getChannelData(channel));\r\n      }\r\n      this.worker.postMessage({\r\n        command: 'record',\r\n        buffer: buffer,\r\n      });\r\n    };\r\n\r\n    source.connect(this.node);\r\n    this.node.connect(this.context.destination); //this should not be necessary\r\n\r\n    let self = {};\r\n    this.worker = new InlineWorker(function () {\r\n      let recLength = 0,\r\n        recBuffers = [],\r\n        sampleRate,\r\n        numChannels;\r\n\r\n      this.onmessage = function (e) {\r\n        switch (e.data.command) {\r\n          case 'init':\r\n            init(e.data.config);\r\n            break;\r\n          case 'record':\r\n            record(e.data.buffer);\r\n            break;\r\n          case 'exportWAV':\r\n            exportWAV(e.data.type);\r\n            break;\r\n          case 'getBuffer':\r\n            getBuffer();\r\n            break;\r\n          case 'clear':\r\n            clear();\r\n            break;\r\n        }\r\n      };\r\n\r\n      function init(config) {\r\n        sampleRate = config.sampleRate;\r\n        numChannels = config.numChannels;\r\n        initBuffers();\r\n      }\r\n\r\n      function record(inputBuffer) {\r\n        for (var channel = 0; channel < numChannels; channel++) {\r\n          recBuffers[channel].push(inputBuffer[channel]);\r\n        }\r\n        recLength += inputBuffer[0].length;\r\n      }\r\n\r\n      function exportWAV(type) {\r\n        let buffers = [];\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n        }\r\n        let interleaved;\r\n        if (numChannels === 2) {\r\n          interleaved = interleave(buffers[0], buffers[1]);\r\n        } else {\r\n          interleaved = buffers[0];\r\n        }\r\n        let dataview = encodeWAV(interleaved);\r\n        let audioBlob = new Blob([dataview], { type: type });\r\n\r\n        this.postMessage({ command: 'exportWAV', data: audioBlob });\r\n      }\r\n\r\n      function getBuffer() {\r\n        let buffers = [];\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n        }\r\n        this.postMessage({ command: 'getBuffer', data: buffers });\r\n      }\r\n\r\n      function clear() {\r\n        recLength = 0;\r\n        recBuffers = [];\r\n        initBuffers();\r\n      }\r\n\r\n      function initBuffers() {\r\n        for (let channel = 0; channel < numChannels; channel++) {\r\n          recBuffers[channel] = [];\r\n        }\r\n      }\r\n\r\n      function mergeBuffers(recBuffers, recLength) {\r\n        let result = new Float32Array(recLength);\r\n        let offset = 0;\r\n        for (let i = 0; i < recBuffers.length; i++) {\r\n          result.set(recBuffers[i], offset);\r\n          offset += recBuffers[i].length;\r\n        }\r\n        return result;\r\n      }\r\n\r\n      function interleave(inputL, inputR) {\r\n        let length = inputL.length + inputR.length;\r\n        let result = new Float32Array(length);\r\n\r\n        let index = 0,\r\n          inputIndex = 0;\r\n\r\n        while (index < length) {\r\n          result[index++] = inputL[inputIndex];\r\n          result[index++] = inputR[inputIndex];\r\n          inputIndex++;\r\n        }\r\n        return result;\r\n      }\r\n\r\n      function floatTo16BitPCM(output, offset, input) {\r\n        for (let i = 0; i < input.length; i++, offset += 2) {\r\n          let s = Math.max(-1, Math.min(1, input[i]));\r\n          output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\r\n        }\r\n      }\r\n\r\n      function writeString(view, offset, string) {\r\n        for (let i = 0; i < string.length; i++) {\r\n          view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n      }\r\n\r\n      function encodeWAV(samples) {\r\n        let buffer = new ArrayBuffer(44 + samples.length * 2);\r\n        let view = new DataView(buffer);\r\n\r\n        /* RIFF identifier */\r\n        writeString(view, 0, 'RIFF');\r\n        /* RIFF chunk length */\r\n        view.setUint32(4, 36 + samples.length * 2, true);\r\n        /* RIFF type */\r\n        writeString(view, 8, 'WAVE');\r\n        /* format chunk identifier */\r\n        writeString(view, 12, 'fmt ');\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, numChannels, true);\r\n        /* sample rate */\r\n        view.setUint32(24, sampleRate, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, sampleRate * 4, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, numChannels * 2, true);\r\n        /* bits per sample */\r\n        view.setUint16(34, 16, true);\r\n        /* data chunk identifier */\r\n        writeString(view, 36, 'data');\r\n        /* data chunk length */\r\n        view.setUint32(40, samples.length * 2, true);\r\n\r\n        floatTo16BitPCM(view, 44, samples);\r\n\r\n        return view;\r\n      }\r\n    }, self);\r\n\r\n    this.worker.postMessage({\r\n      command: 'init',\r\n      config: {\r\n        sampleRate: this.context.sampleRate,\r\n        numChannels: this.config.numChannels,\r\n      },\r\n    });\r\n\r\n    this.worker.onmessage = (e) => {\r\n      let cb = this.callbacks[e.data.command].pop();\r\n      if (typeof cb == 'function') {\r\n        cb(e.data.data);\r\n      }\r\n    };\r\n  }\r\n\r\n  record() {\r\n    this.recording = true;\r\n  }\r\n\r\n  stop() {\r\n    this.recording = false;\r\n  }\r\n\r\n  clear() {\r\n    this.worker.postMessage({ command: 'clear' });\r\n  }\r\n\r\n  getBuffer(cb) {\r\n    cb = cb || this.config.callback;\r\n    if (!cb) throw new Error('Callback not set');\r\n\r\n    this.callbacks.getBuffer.push(cb);\r\n\r\n    this.worker.postMessage({ command: 'getBuffer' });\r\n  }\r\n\r\n  exportWAV(cb, mimeType) {\r\n    mimeType = mimeType || this.config.mimeType;\r\n    cb = cb || this.config.callback;\r\n    if (!cb) throw new Error('Callback not set');\r\n\r\n    this.callbacks.exportWAV.push(cb);\r\n\r\n    this.worker.postMessage({\r\n      command: 'exportWAV',\r\n      type: mimeType,\r\n    });\r\n  }\r\n\r\n  static forceDownload(blob, filename) {\r\n    let url = (window.URL || window.webkitURL).createObjectURL(blob);\r\n    let link = window.document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename || 'output.wav';\r\n    let click = document.createEvent('Event');\r\n    click.initEvent('click', true, true);\r\n    link.dispatchEvent(click);\r\n  }\r\n}\r\n\r\nexport default Recorder;\r\n","import React, { useState } from 'react';\r\nimport '../styles/controlPanel.scss';\r\nimport PlayArrowOutlinedIcon from '@material-ui/icons/PlayArrowOutlined';\r\nimport PauseOutlinedIcon from '@material-ui/icons/PauseOutlined';\r\nimport StopOutlinedIcon from '@material-ui/icons/StopOutlined';\r\nimport MoodIcon from '@material-ui/icons/Mood';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport Recorder from '../modules/Recorder';\r\n\r\nfunction ControlPanel({ setEnableAllSounds, setCanPlay, setRecordUrl }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [record, setRecord] = useState(null);\r\n\r\n  const handlePlayStop = (bool) => {\r\n    // Handle play / stop buttons\r\n    setCanPlay(bool);\r\n  };\r\n\r\n  const changeAllSounds = (message) => {\r\n    // Handle 'play all pads' (smiley) and stop buttons\r\n    setEnableAllSounds({ change: message });\r\n    if (message === 'disable') {\r\n      setCanPlay(false);\r\n    }\r\n  };\r\n\r\n  const startRecord = () => {\r\n    // Start a new record\r\n    const audioContext = new window.AudioContext();\r\n    navigator.mediaDevices\r\n      .getDisplayMedia({ audio: true, video: true }) // Use device and not mic / camera\r\n      .then((stream) => {\r\n        const input = audioContext.createMediaStreamSource(stream);\r\n        const rec = new Recorder(input, { numChannels: 1 });\r\n        rec.record();\r\n        setRecord(rec);\r\n      })\r\n      .catch((err) => console.log('Uh oh... unable to get stream...', err));\r\n  };\r\n\r\n  function stopRecord() {\r\n    // Stop record\r\n    record.stop();\r\n    record.exportWAV((blob) => {\r\n      let blobUrl = URL.createObjectURL(blob);\r\n      setRecordUrl(blobUrl);\r\n    });\r\n  }\r\n\r\n  const handleRecord = () => {\r\n    // Handle record button\r\n    isRecording ? stopRecord() : startRecord();\r\n    setIsRecording(!isRecording);\r\n  };\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <PlayArrowOutlinedIcon\r\n        fontSize='large'\r\n        onClick={() => handlePlayStop(true)}\r\n      />\r\n      <PauseOutlinedIcon\r\n        fontSize='large'\r\n        onClick={() => handlePlayStop(false)}\r\n      />\r\n      <StopOutlinedIcon\r\n        fontSize='large'\r\n        onClick={() => changeAllSounds('disable')}\r\n      />\r\n      <MoodIcon fontSize='large' onClick={() => changeAllSounds('enable')} />\r\n      {isRecording ? (\r\n        <RadioButtonCheckedIcon fontSize='large' onClick={handleRecord} />\r\n      ) : (\r\n        <RadioButtonUncheckedIcon fontSize='large' onClick={handleRecord} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React, { useEffect, useState } from 'react';\nimport './styles/App.scss';\nimport PadsContainer from './components/PadsContainer';\nimport { TimeContext } from './TimeContext';\nimport ControlPanel from './components/ControlPanel';\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/src/styles.scss';\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [enableCounter, setEnableCounter] = useState(0);\n  const [canPlay, setCanPlay] = useState(false);\n  const [effectAllSounds, setEffectAllSounds] = useState(false);\n  const [recordUrl, setRecordUrl] = useState(null);\n\n  useEffect(() => {\n    // Set timer after play button clicked and there is more then 0 pads on\n    if (canPlay && enableCounter > 0) {\n      const interval = setInterval(() => {\n        if (timer === 7000) {\n          setTimer(0);\n        } else {\n          setTimer((prevTime) => (prevTime += 10));\n        }\n      }, 10);\n      return () => clearInterval(interval);\n    } else {\n      setTimer(0);\n      return;\n    }\n  }, [timer, enableCounter, canPlay]);\n\n  return (\n    <TimeContext.Provider\n      value={{ timer, setEnableCounter, effectAllSounds, setEffectAllSounds }}\n    >\n      <div className='App'>\n        <h1>Loop Machine</h1>\n        <PadsContainer canPlay={canPlay} />\n        <ControlPanel\n          setCanPlay={setCanPlay}\n          setEnableAllSounds={setEffectAllSounds}\n          setRecordUrl={setRecordUrl}\n        />\n        <div classname='audioPlayer'>\n          {recordUrl ? <AudioPlayer src={recordUrl} /> : null}\n        </div>\n      </div>\n    </TimeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}